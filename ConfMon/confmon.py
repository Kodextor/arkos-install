#!/usr/bin/env python

########################################################################
##
##  arkOS Installer - Configuration Change Monitor
##  Copyright (C) 2013 Jacob Cook
##  jacob@ark-os.org
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
########################################################################

import os
import ConfigParser
import logging
import subprocess

logger = logging.getLogger('arkos-confmon')
hdlr = logging.FileHandler('/var/log/arkos-confmon.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)

def __init__():
	self.parse = ConfigParser()

	config = self.parse.read('/boot/arkos-confmon.conf')
	if not config:
		logger.error("Config file not found! Please run `sudo pacman -Syu arkos-confmon`")
	if self.parse.get('confmon', 'update'):
		makechange()
	else:
		logger.info("Booted, no changes requested")

def makechange():
	reboot = False

	# Disk resize check
	if self.parse.get('resize', 'resize'):
		repart = subprocess.Popen(['fdisk', '/dev/mmcblk0'], stdin=PIPE, stderr=PIPE)
		error = repart.communicate(input='d\n2\nn\np\n2\n\n\nw\n')[1]
		if error:
		    logger.error("Repartitioning failed: " + error)

		resize = subprocess.Popen(['resize2fs', '/dev/mmcblk0p2'], stdout=PIPE, stderr=PIPE)
		error = resize.communicate()[1]
		if "e2fsck" in error:
		    check = subprocess.call(['e2fsck', '-fy', '/dev/mmcblk0p2'], stderr=STDOUT)
		    resize = subprocess.call(['resize2fs', '/dev/mmcblk0p2'], stderr=STDOUT)
		elif "error" in error or "failed" in error:
		    logger.error("Disk resize failed: " + resize)
		reboot = True
		self.parse.set('resize', 'resize', "False")

	# Hostname check
	if self.parse.get('hostname', 'change'):
		f = open('/etc/hostname')
		hostname = self.parse.get('hostname', 'hostname')
		f.write('# Automatically generated by arkos-confmon\n' + hostname + '\n')
		f.close()
		logger.info("Hostname changed to " + hostname)
		self.parse.set('hostname', 'change', "False")

	# Timezone check
	if self.parse.get('timezone', 'change'):
		zone = self.parse.get('timezone', 'zone')
		subzone = self.parse.get('timezone', 'subzone')
		if os.path.exists('/etc/localtime'):
			os.remove('/etc/localtime')
		os.symlink('/usr/share/zoneinfo/' + zone + '/' + subzone, '/etc/localtime')
		logger.info("Timezone changed to " + zone + "/" + subzone)
		self.parse.set('timezone', 'change', "False")

	# User check
	if self.parse.get('credentials', 'change'):
		rootpass = self.parse.get('credentials', 'rootpass')
		chpass = subprocess.call(['passwd', 'root'], stdin=subprocess.PIPE)
		chpass.communicate(input=[rootpass + '\n' + rootpass])
		logger.warning("Root password changed! If you did not request this, change your root password immediately")
		self.parse.set('credentials', 'change', "False")
		self.parse.set('credentials', 'rootpass', "")

	# Finish the job: write the new config and reboot if necessary
	if reboot:
		self.parse.set('confmon', 'update', "False")
		self.parse.write('/boot/arkos-confmon.conf')
		subprocess.call('shutdown', '-r', 'now')
		logger.info('Disk resized. Rebooting RPi to take effect.')
	else:
		self.parse.set('confmon', 'update', "False")
		self.parse.write('/boot/arkos-confmon.conf')


__init__()